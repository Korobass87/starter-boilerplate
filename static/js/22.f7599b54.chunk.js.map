{"version":3,"sources":["views/app-views/base/clients/clients-list/UserView.js","components/shared-components/AvatarStatus/index.js","components/layout-components/EditUserForm.jsx","views/app-views/base/clients/clients-list/index.js"],"names":["UserView","this","props","data","open","close","width","placement","onClose","closable","className","name","username","dashed","MailOutlined","email","PhoneOutlined","phone","IeOutlined","website","BankOutlined","address","city","NodeIndexOutlined","street","HomeOutlined","FieldNumberOutlined","zipcode","Component","AvatarStatus","suffix","subTitle","id","src","onNameClick","onClick","EditUserForm","user","useState","setData","key","Form","useForm","form","console","log","openMessage","message","loading","content","setTimeout","success","duration","layout","colon","onFinish","labelCol","span","wrapperCol","initialValues","remember","Item","label","initialValue","onChange","e","target","value","type","orientation","plain","suite","company","shouldUpdate","htmlType","UserList","state","users","userProfileVisible","selectedUser","isModalOpen","deleteUser","userId","setState","filter","item","showUserProfile","userInfo","closeUserProfile","modalOpen","handleCancel","editUser","axios","get","then","finally","tableColumns","title","dataIndex","render","_","record","img","sorter","compare","a","b","toLowerCase","length","status","color","elm","icon","EditOutlined","size","EyeOutlined","danger","DeleteOutlined","bodyStyle","padding","style","display","justifyContent","tip","columns","dataSource","rowKey","footer","centered"],"mappings":"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","file":"static/js/22.f7599b54.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Drawer, Divider } from 'antd';\r\nimport {\r\n\tMailOutlined,\r\n\tPhoneOutlined,\r\n\tIeOutlined,\r\n\tBankOutlined,\r\n\tNodeIndexOutlined,\r\n\tHomeOutlined,\r\n\tFieldNumberOutlined,\r\n} from '@ant-design/icons';\r\n\r\nexport class UserView extends Component {\r\n\trender() {\r\n\t\tconst { data, open, close} = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<Drawer\r\n\t\t\t\twidth={300}\r\n\t\t\t\tplacement=\"right\"\r\n\t\t\t\tonClose={close}\r\n\t\t\t\tclosable={false}\r\n\t\t\t\topen={open}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"text-center mt-3\">\r\n\t\t\t\t\t<h3 className=\"mt-2 mb-0\">{data?.name}</h3>\r\n\t\t\t\t\t<span className=\"text-muted\">Ник: @{data?.username}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Divider dashed />\r\n\t\t\t\t<div className=\"\">\r\n\t\t\t\t\t<h6 className=\"text-muted text-uppercase mb-3\">Контакты</h6>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<MailOutlined />\r\n\t\t\t\t\t\t<span className=\"ml-3 text-dark\">mail: {data?.email}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<PhoneOutlined />\r\n\t\t\t\t\t\t<span className=\"ml-3 text-dark\">Phone: {data?.phone}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<IeOutlined />\r\n\t\t\t\t\t\t<span className=\"ml-3 text-dark\">Website: {data?.website}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"mt-5\">\r\n\t\t\t\t\t<h6 className=\"text-muted text-uppercase mb-3\">АДРЕС</h6>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<BankOutlined />\r\n\t\t\t\t\t\t<span className=\"ml-3 text-dark\">Город: {data?.address.city}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<NodeIndexOutlined />\r\n\t\t\t\t\t\t<span className=\"ml-3 text-dark\">Улица: {data?.address.street}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<HomeOutlined />\r\n\t\t\t\t\t\t<span className=\"ml-3 text-dark\">Дом: {data?.address.street}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<FieldNumberOutlined />\r\n\t\t\t\t\t\t<span className=\"ml-3 text-dark\">Индекс: {data?.address.zipcode}</span>\r\n\t\t\t\t\t</p>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</Drawer>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default UserView\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n// const renderAvatar = props => {\r\n// \treturn <Avatar {...props} className={`ant-avatar-${props.type}`}>{props.text}</Avatar>;\r\n// }\r\n\r\nexport const AvatarStatus = props => {\r\n\tconst { name, suffix, subTitle, id,  src, onNameClick } = props\r\n\treturn (\r\n\t\t<div className=\"avatar-status d-flex align-items-center\">\r\n\r\n\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonNameClick ? \r\n\t\t\t\t\t\t<div onClick={() => onNameClick({name, subTitle, src, id})} className=\"avatar-status-name clickable\">{name}</div> \r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<div className=\"avatar-status-name\">{name}</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<span>{suffix}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"text-muted avatar-status-subtitle\">{subTitle}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nAvatarStatus.propTypes = {\r\n\tname: PropTypes.string,\r\n\tsrc: PropTypes.string,\r\n\ttype: PropTypes.string,\r\n\tonNameClick: PropTypes.func\r\n}\r\n\r\n\r\nexport default AvatarStatus;\r\n","import React, { useState } from 'react'\nimport { Button, Form, Input, Divider, message } from 'antd'\nconst EditUserForm = ({ user, close }) => {\n    const [data, setData] = useState(user)\n    const key = 'updatable';\n    const [form] = Form.useForm()\n    console.log(user)\n    const onFinish = () => {\n        openMessage()\n        setTimeout(() => {\n            close()\n        }, 1000)\n    }\n\n    const openMessage = () => {\n        message.loading({\n            content: 'Идет сохранение изменений',\n            key,\n        })\n        setTimeout(() => {\n            message.success({\n                content: 'Выполнено!',\n                key,\n                duration: 2,\n            })\n        }, 1000)\n    }\n\n    return (\n        <>\n\n            <Form\n                form={form}\n                name=\"Edit-form\"\n                layout=\"horizontal\"\n                colon={true}\n                onFinish={onFinish}\n                labelCol={{ span: 4 }}\n                wrapperCol={{ span: 8 }}\n                initialValues={{ remember: true }}\n            >\n                <Form.Item name=\"name\" label=\"Имя\" initialValue={data.name}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, name: e.target.value })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n\n                <Form.Item name=\"username\" label=\"Ник\" initialValue={data.username}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, username: e.target.value })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n                <Form.Item name=\"phone\" label=\"Телефон\" initialValue={data.phone}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, phone: e.target.value })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n                <Form.Item name=\"email\" label=\"Email\" initialValue={data.email}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, email: e.target.value })\n                        }}\n                        type=\"email\"\n                    />\n                </Form.Item>\n                <Form.Item name=\"website\" label=\"Сайт\" initialValue={data.website}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, website: e.target.value })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n                <Divider orientation=\"left\" plain>\n                    Адрес\n                </Divider>\n                <Form.Item name=\"city\" label=\"Город\" initialValue={data.address.city}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, address: { ...data.address, city: e.target.value } })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n                <Form.Item name=\"street\" label=\"Улица\" initialValue={data.address.street}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, address: { ...data.address, street: e.target.value } })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n                <Form.Item name=\"suite\" label=\"Дом\" initialValue={data.address.suite}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, address: { ...data.address, suite: e.target.value } })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n                <Form.Item name=\"zipcode\" label=\"Индекс\" initialValue={data.address.zipcode}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, address: { ...data.address, zipcode: e.target.value } })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n\n                <Divider orientation=\"left\" plain>\n                    Компания\n                </Divider>\n\n                <Form.Item name=\"company-name\" label=\"Компания\" initialValue={data.company.name}>\n                    <Input\n                        onChange={(e) => {\n                            setData({ ...data, company: { ...data.company, name: e.target.value } })\n                        }}\n                        type=\"text\"\n                    />\n                </Form.Item>\n\n                <Form.Item shouldUpdate>\n                    {() => (\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Сохранить изменения\n                        </Button>\n                    )}\n                </Form.Item>\n            </Form>\n        </>\n    )\n}\n\nexport default EditUserForm\n","import React, { Component } from 'react'\nimport { Card, Table, Tag, Tooltip, message, Button, Spin, Modal } from 'antd'\nimport { EyeOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons'\nimport axios from 'axios'\nimport UserView from './UserView'\nimport AvatarStatus from 'components/shared-components/AvatarStatus'\nimport EditUserForm from 'components/layout-components/EditUserForm.jsx'\n// import userData from \"assets/data/user.json\";\n\nexport class UserList extends Component {\n    state = {\n        users: [],\n        userProfileVisible: false,\n        selectedUser: null,\n        loading: false,\n        isModalOpen: false,\n    }\n\n    componentDidMount() {\n        this.setState({\n            ...this.state,\n            loading: true,\n        })\n        axios\n            .get('https://jsonplaceholder.typicode.com/users')\n            .then((data) => {\n                this.setState({\n                    ...this.state,\n                    users: data.data,\n                })\n            })\n            .finally(() => {\n                this.setState({\n                    ...this.state,\n                    loading: false,\n                })\n            })\n    }\n\n    deleteUser = (userId) => {\n        this.setState({\n            users: this.state.users.filter((item) => item.id !== userId),\n        })\n        message.success({ content: `Deleted user ${userId}`, duration: 2 })\n    }\n\n    showUserProfile = (userInfo) => {\n        this.setState({\n            userProfileVisible: true,\n            selectedUser: userInfo,\n        })\n    }\n\n    closeUserProfile = () => {\n        this.setState({\n            userProfileVisible: false,\n            selectedUser: null,\n        })\n    }\n\n    modalOpen = () => {\n        this.setState({\n            isModalOpen: true,\n        })\n    }\n\n\n\n    handleCancel = () => {\n        this.setState({\n            isModalOpen: false,\n        })\n    }\n\n    editUser = (userInfo) => {\n        this.setState({\n            selectedUser: userInfo,\n        })\n\n        this.modalOpen()\n    }\n\n    render() {\n        const { users, userProfileVisible, selectedUser, loading, isModalOpen } = this.state\n\n        const tableColumns = [\n            {\n                title: 'Клиент',\n                dataIndex: 'name',\n                render: (_, record) => (\n                    <div className=\"d-flex\">\n                        <AvatarStatus src={record.img} name={record.name} subTitle={record.email} />\n                    </div>\n                ),\n                sorter: {\n                    compare: (a, b) => {\n                        a = a.name.toLowerCase()\n                        b = b.name.toLowerCase()\n                        return a > b ? -1 : b > a ? 1 : 0\n                    },\n                },\n            },\n            {\n                title: 'Телефон',\n                dataIndex: 'phone',\n                sorter: {\n                    compare: (a, b) => a.phone.length - b.phone.length,\n                },\n            },\n            {\n                title: 'Город',\n                dataIndex: 'address',\n                render: (address) => <span>{address.city}</span>,\n                sorter: {\n                    compare: (a, b) => {\n                        a = a.address.city.toLowerCase()\n                        b = b.address.city.toLowerCase()\n                        return a > b ? -1 : b > a ? 1 : 0\n                    },\n                },\n            },\n            {\n                title: 'Status',\n                dataIndex: 'status',\n                render: (status) => (\n                    <Tag className=\"text-capitalize\" color={status === 'active' ? 'cyan' : 'red'}>\n                        {status}\n                    </Tag>\n                ),\n                sorter: {\n                    compare: (a, b) => {\n                        a = a.name.toLowerCase()\n                        b = b.name.toLowerCase()\n                        return a > b ? -1 : b > a ? 1 : 0\n                    },\n                },\n            },\n            {\n                title: '',\n                dataIndex: 'actions',\n                render: (_, elm) => (\n                    <div className=\"text-right\">\n                        <Tooltip title=\"View\">\n                            <Button\n                                className=\"mr-2\"\n                                icon={<EditOutlined />}\n                                onClick={() => {\n                                    this.editUser(elm)\n                                }}\n                                size=\"small\"\n                            />\n                        </Tooltip>\n                        <Tooltip title=\"View\">\n                            <Button\n                                type=\"primary\"\n                                className=\"mr-2\"\n                                icon={<EyeOutlined />}\n                                onClick={() => {\n                                    this.showUserProfile(elm)\n                                }}\n                                size=\"small\"\n                            />\n                        </Tooltip>\n                        <Tooltip title=\"Delete\">\n                            <Button\n                                danger\n                                icon={<DeleteOutlined />}\n                                onClick={() => {\n                                    this.deleteUser(elm.id)\n                                }}\n                                size=\"small\"\n                            />\n                        </Tooltip>\n                    </div>\n                ),\n            },\n        ]\n        return (\n            <>\n                <Card bodyStyle={{ padding: '0px' }}>\n                    {loading ? (\n                        <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\n                            <Spin tip=\"Loading...\"></Spin>\n                        </div>\n                    ) : (\n                        <Table columns={tableColumns} dataSource={users} rowKey=\"id\" />\n                    )}\n                    <UserView data={selectedUser} open={userProfileVisible} close={() => this.closeUserProfile()} />\n                </Card>\n                {isModalOpen && (\n                    <Modal\n                        footer={[\n                            <Button key=\"back\" onClick={this.handleCancel}>\n                                Cancel\n                            </Button>,\n                        ]}\n                        width={700}\n                        centered={true}\n                        title=\"\"\n                        open={isModalOpen}\n                    >\n                        <EditUserForm close={this.handleCancel} user={selectedUser} />\n                    </Modal>\n                )}\n            </>\n        )\n    }\n}\n\nexport default UserList\n"],"sourceRoot":""}